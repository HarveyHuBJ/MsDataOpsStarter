name: CD-03-x-BlobAsSQLExternal

on:
  workflow_dispatch: 
    inputs:
        ci_run_number:
          description: 'ci run number'     
          required: true
          default: '19'
        file_codes:
          description: 'input file#(eg #1,#2); input "all" for running all loading'     
          required: true
          default: 'all'
  # push:
  #   branches:
  #     - "main"
env:
  # Path to the solution file relative to the root of the project.
  FAMILY_NAME: hh101 
  ENV_NAME: dev 

permissions:
  contents: read

jobs:
  Deploy-SQLDB:
    runs-on: ubuntu-latest
    steps:
    #### set environment variables
    - name: set environment variables
      uses: allenevans/set-env@v2.0.0
      with:
        STORAGE_ACCOUNT: storage${{env.FAMILY_NAME}}${{env.ENV_NAME}} 
        SRC_DATA: src-data   # same as blob container

        KEY_VAULT: kv-${{env.FAMILY_NAME}}-${{env.ENV_NAME}} 

        DB_SERVER: dbsrv-${{env.FAMILY_NAME}}-dev.database.windows.net
        DB_NAME: db-${{env.FAMILY_NAME}}-${{env.ENV_NAME}} 
        DB_USER_LOGIN: db_admin

    #### checkout repo.
    - uses: actions/checkout@v3
      name: checkout repo.
   
    #### az login to access key vault 
    - name: az login with github_dataops_spn
      uses: azure/login@v1                            # github_dataops_spn
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    #### retrieve secrets, including secret-storage-sas,secret-dmk,secret-dbadmin-pwd
    - uses: Azure/get-keyvault-secrets@v1
      id: getSecretAction # ID for secrets that you will reference
      name: retrieve secrets
      with:
        keyvault: ${{env.KEY_VAULT}} # name of key vault in Azure portal
        secrets: 'secret-storage-sas,secret-dmk,secret-dbadmin-pwd'  # comma separated list of secret keys to fetch from key vault 
 
    ### inspect secrets
    - name: echo secrets
      run: |
        echo ${{steps.getSecretAction.outputs.secret-storage-sas}}

    #### run sql script - call init_external_data_source
    - name: Azure SQL Deploy - call init_external_data_source
      uses: Azure/sql-action@v1.3
      with:
        # The connection string, including authentication information, for the Azure SQL Server database.
        connection-string: Server=tcp:${{env.DB_SERVER}},1433;Initial Catalog=${{env.DB_NAME}};Persist Security Info=False;User ID=${{env.DB_USER_LOGIN}};Password=${{steps.getSecretAction.outputs.secret-dbadmin-pwd}};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;
        sql-file: './AzureSqlDB/00AdminScripts/init_external_data_source.sql'  
        # additional sqlcmd arguments will be applied.
        arguments: '-v name="${{env.FAMILY_NAME}}" dmk_password="${{steps.getSecretAction.outputs.secret-dmk}}" sas="${{steps.getSecretAction.outputs.secret-storage-sas}}" blob_location="https://${{env.STORAGE_ACCOUNT}}.blob.core.windows.net/${{env.SRC_DATA}}"'  
        # arguments: '-v cols=name,object_id'   # for demo.sql

 
    #### run sql script - call init_external_data_source
    - name: Azure SQL Deploy - call bulk_inserts
      uses: Azure/sql-action@v1.3
      with:
        # The connection string, including authentication information, for the Azure SQL Server database.
        connection-string: Server=tcp:${{env.DB_SERVER}},1433;Initial Catalog=${{env.DB_NAME}};Persist Security Info=False;User ID=${{env.DB_USER_LOGIN}};Password=${{steps.getSecretAction.outputs.secret-dbadmin-pwd}};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;
        sql-file: './AzureSqlDB/00AdminScripts/bulk_inserts.sql'  
        # additional sqlcmd arguments will be applied.
        arguments: '-v name="${{env.FAMILY_NAME}}" files="${{github.event.inputs.file_codes }}" root="ci-run/${{github.event.inputs.ci_run_number}}/00Data/01csv" '  
        # arguments: '-v cols=name,object_id'   # for demo.sql

      

        
